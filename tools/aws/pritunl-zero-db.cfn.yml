---
AWSTemplateFormatVersion: '2010-09-09'
Description: Pritunl - Enterprise Distributed VPN Server
Parameters:
  Service:
    Type: String
    Default: 'Pritnul'
    Description: Service name for this product
  PritunlDomain:
    Type: String
    Description: This is the domain that pritunl can control for letsencrypt dns and also to add new servers to
  SSMKey:
    Type: String
    Description: KMS key for alias/aws/ssm
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  StackSize:
    Type: String
    Default: '1'
    Description: Number of Pritunl instances to create
    ConstraintDescription: Must be an integer
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Pritunl EC2 instance type
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  DatabaseInstanceType:
    Type: String
    Default: m3.medium
    Description: MongoDB EC2 instance type
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id of existsing VPC
    ConstraintDescription: Must be the Id of an existing VPC
  DatabaseVpcSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: The SubnetId in your VPC to launch MongoDB instance
    ConstraintDescription: Must be an existing subnet in VPC
  VpcSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your VPC to launch Pritunl instances
    ConstraintDescription: Must be a list of existing subnets in VPC
  PublicIpEnabled:
    Type: String
    Description: true or false for enabling public ip for instances
    Default: 'false'
  DatabasePublicIpEnabled:
    Type: String
    Description: true or false for enabling public ip for database
    Default: 'false'
  AdminPort:
    Type: Number
    Description: what port is the admin system running on
    Default: 8443
  AdminCidrRange:
    Type: String
    Default : "0.0.0.0/0"
    Description: what ip's should be able to connect to the admin port
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-02cc5b6cf82d354da
      HVMG2: NOT_SUPPORTED
    us-west-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-0b5913cdbba67598e
      HVMG2: NOT_SUPPORTED
    us-west-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-0c3ca2c6f4edb5546
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-06e710681e5ee07aa
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-0f0debf49705e047c
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-00cbdef8d2acf44a7
      HVMG2: NOT_SUPPORTED
    ap-northeast-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-016ad6443b4a3d960
      HVMG2: NOT_SUPPORTED
    ap-southeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-0fbfb4926256a1f1e
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-088018633b4291710
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-0273771427032a4e6
      HVMG2: NOT_SUPPORTED
    us-gov-west-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-e5dbbf84
      HVMG2: NOT_SUPPORTED
Resources:
  PritunlInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
      Policies:
      - PolicyName: Pritunl-CustomPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - route53:ListHostedZones
            - route53:GetChange
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - route53:ChangeResourceRecordSets
            Resource:
            - !Sub "arn:aws:route53:::hostedzone/${HostedZone}"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - cloudwatch:PutMetricData
            - cloudwatch:GetMetricStatistics
            - cloudwatch:ListMetrics
            - ec2:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:DescribeLogGroups
            Resource: !Sub "arn:aws:logs:*:*:log-group:/aws/${AWS::StackName}*"
          - Effect: Allow
            Action:
            - ssm:DescribeParameters
            Resource: "*"
          - Effect: Allow
            Action:
            - ssm:GetParameters
            - ssm:GetParameter
            - ssm:GetParametersByPath
            Resource:
            - !Sub "arn:aws:ssm:*:*:parameter/config/${Service}"
            - !Sub "arn:aws:ssm:*:*:parameter/config/${Service}/*"
            - !Sub "arn:aws:ssm:*:*:parameter/config/${Service}_*"
            - !Sub "arn:aws:ssm:*:*:parameter/config/${Service}_*/*"
          - Effect: Allow
            Action:
            - kms:Decrypt
            Resource:
            - Ref: SSMKey
          - Effect: Allow
            Action:
            - ssm:UpdateInstanceInformation
            - ssmmessages:CreateControlChannel
            - ssmmessages:CreateDataChannel
            - ssmmessages:OpenControlChannel
            - ssmmessages:OpenDataChannel
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetEncryptionConfiguration
            Resource: '*'
          - Effect: Allow
            Action:
            - kms:GenerateDataKey
            Resource: '*'
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: PritunlInstanceRole
      
  DatabaseInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Update
          - SSM
          - AWSLogs
          - AWSLogsPart2
          - Setup
          - Install
          - Configure
        Update:
          commands:
            update_system:
              command: yum update -y
        SSM:
          commands:
            00-yum-install-agent:
              command: yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              ignoreErrors: true
            01-verify-running:
              command: status amazon-ssm-agent
              ignoreErrors: true
            02-start-anyway:
              command: start amazon-ssm-agent
              ignoreErrors: true
        AWSLogs:
          files:
            "/etc/awslogs/awslogs.conf":
              content: |
                [general]
                state_file = /var/lib/awslogs/agent-state
              mode: '000644'
              owner: root
              group: root
            "/etc/awslogs/config/pritunl_custom.conf":
              content:
                !Sub  |
                  [cfn-init.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cfn-init.log
                  log_stream_name={instance_id}
                  file=/var/log/cfn-init.log
                  
                  [cloud-init-output.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cloud-init-output.log
                  log_stream_name={instance_id}
                  file=/var/log/cloud-init-output.log   
                                 
                  [cloud-init.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cloud-init.log
                  log_stream_name={instance_id}
                  file=/var/log/cloud-init.log
                  
                  [/var/log/mongodb/mongod.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/mongodb/mongod.log
                  log_stream_name={instance_id}
                  file=/var/log/mongodb/mongod.log*
                  
              mode: '000644'
              owner: root
              group: root
          commands:
            01_set_region:
              command: !Sub "sed -i 's/us-east-1/${AWS::Region}/g'  /etc/awslogs/awscli.conf"
          packages:
            yum:
              awslogs: []
        AWSLogsPart2:
          commands:
            01_start_awslogs:
              command: service awslogs start
            01_start_awslogs_onreboot:
              command: chkconfig awslogs on
        Setup:
          files:
            "/etc/yum.repos.d/mongodb-org-3.0.repo":
              content:
                !Sub |
                  [mongodb-org-4.0]
                  name=MongoDB Repository
                  baseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/4.0/x86_64/
                  gpgcheck=1
                  enabled=1
                  gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc
              mode: '000644'
              owner: root
              group: root

        Install:
          packages:
            yum:
              mongodb-org: []
        Configure:
          commands:
            01_conf_mongodb:
              command: "sed -i 's/bindIp: 127.0.0.1/bindIp: 0.0.0.0/g' /etc/mongod.conf"
            02_start_mongodb:
              command: service mongod start
            02_start_onreboot:
              command: chkconfig mongod on
              
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      IamInstanceProfile:
        Ref: Ec2InstanceProfile
      NetworkInterfaces:
      - AssociatePublicIpAddress: !Ref DatabasePublicIpEnabled
        DeviceIndex: '0'
        GroupSet:
        - Ref: DatabaseSecurityGroup
        SubnetId:
          Ref: DatabaseVpcSubnet
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: '32'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v   --stack "${AWS::StackName}" --resource DatabaseInstance --configsets InstallAndRun --region ${AWS::Region}
            # Signal the status from cfn-init\n"
            /opt/aws/bin/cfn-signal -e $?   --stack "${AWS::StackName}"  --resource DatabaseInstance  --region ${AWS::Region}
      Tags:
        -
          Key: Name
          Value: !Sub
            - "${StackName}-database"
            - StackName: !Ref AWS::StackName
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  PritunlScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      VPCZoneIdentifier:
        Ref: VpcSubnets
      LaunchConfigurationName:
        Ref: PritunlLaunchConfig
      MinSize:
        Ref: StackSize
      MaxSize:
        Ref: StackSize
      DesiredCapacity:
        Ref: StackSize
      Tags:
        -
          Key: Name
          Value: !Sub
            - "${StackName}-instance"
            - StackName: !Ref AWS::StackName
          PropagateAtLaunch: true
  PritunlLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Update
          - SSM
          - AWSLogs
          - Setup
          - Install
          - Configure
        Update:
          commands:
            update_system:
              command: yum update -y
        SSM:
          commands:
            00-yum-install-agent:
              command: yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              ignoreErrors: true
            01-verify-running:
              command: status amazon-ssm-agent
              ignoreErrors: true
            02-start-anyway:
              command: start amazon-ssm-agent
              ignoreErrors: true
        AWSLogs:
          files:
            "/etc/awslogs/awslogs.conf":
              content: |
                [general]
                state_file = /var/lib/awslogs/agent-state
              mode: '000644'
              owner: root
              group: root
            "/etc/awslogs/config/pritunl_custom.conf":
              content:
                !Sub  |
                  [cfn-init.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cfn-init.log
                  log_stream_name={instance_id}
                  file=/var/log/cfn-init.log
                  
                  [cloud-init-output.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cloud-init-output.log
                  log_stream_name={instance_id}
                  file=/var/log/cloud-init-output.log   
                                 
                  [cloud-init.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cloud-init.log
                  log_stream_name={instance_id}
                  file=/var/log/cloud-init.log
                  
                  [/var/log/pritunl.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/pritunl-zero.log
                  log_stream_name={instance_id}
                  file=/var/log/pritunl.log*
                  
              mode: '000644'
              owner: root
              group: root
          commands:
            01_set_region:
              command: !Sub "sed -i 's/us-east-1/${AWS::Region}/g'  /etc/awslogs/awscli.conf"
          packages:
            yum:
              awslogs: []
        AWSLogsPart2:
          commands:
            01_start_awslogs:
              command: service awslogs restart
            01_start_awslogs_onreboot:
              command: chkconfig awslogs on
        Setup:
          files:
            "/etc/yum.repos.d/pritunl.repo":
              content:
                !Sub |
                  [pritunl]
                  name=Pritunl Repository
                  baseurl=https://repo.pritunl.com/stable/yum/centos/7/
                  gpgcheck=1
                  enabled=1
              mode: '000644'
              owner: root
              group: root
          commands:
            00-keycollect:
              command: gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 7568D9BB55FF9E5287D586017AE645C0CF8E292A
            01-getkey:
              command: gpg --armor --export 7568D9BB55FF9E5287D586017AE645C0CF8E292A > /tmp/key.tmp
            02-importkey:
              command: rpm --import /tmp/key.tmp
            03-rmkey:
              command: rm -f /tmp/key.tmp
        Install:
          packages:
            yum:
              python27: []
              pritunl-zero: []
          files:
            "/etc/pritunl-zero.conf":
              content:
                !Sub |
                  {
                      "bind_addr": "0.0.0.0",
                      "log_path": "/var/log/pritunl.log",
                      "temp_path": "/tmp/pritunl_%r",
                      "local_address_interface": "auto",
                      "mongodb_uri": "mongodb://${DatabaseInstance.PrivateIp}:27017/pritunl-zero",
                      "port": "${AdminPort}"
                  }
              mode: '000644'
              owner: root
              group: root
        Configure:
          commands:
            01_start_pritunl:
              command: start pritunl
            02_set_admin_port:
              command: !Sub "pritunl-zero set app.server_port ${AdminPort}"
            03_set_mongodb_port:
              command: !Sub "sudo pritunl-zero mongo "mongodb://${DatabaseInstance.PrivateIp}:27017/pritunl-zero"
            04_route53_setup
              command: pritunl-ssh-host config aws-access-key AWS_ACCESS_KEY
            04b_route53_setup
              command: pritunl-ssh-host config aws-secret-key AWS_SECRET_KEY
            04c_route53_setup
              command: !Sub "sudo pritunl-ssh-host config route-53-zone ${PritunlZeroDomain}"
              
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: PritunlSecurityGroup
      AssociatePublicIpAddress: !Ref PublicIpEnabled
      KeyName:
        Ref: KeyName
      IamInstanceProfile:
        Ref: Ec2InstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack "${AWS::StackName}" --resource PritunlLaunchConfig  --configsets InstallAndRun --region "${AWS::Region}"
            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack "${AWS::StackName}" --resource PritunlLaunchConfig --region "${AWS::Region}"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MongoDB Security Group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '27017'
        ToPort: '27017'
        SourceSecurityGroupId:
          Ref: PritunlSecurityGroup
  PritunlSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Pritunl Security Group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp #this is for letsencrypt
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: !Ref AdminPort
        ToPort: !Ref AdminPort
        CidrIp: !Ref AdminCidrRange
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub "${PritunlZeroDomain}"
      HostedZoneConfig:
        Comment: !Sub "HostedZone resources for the ${AWS::StackName} to control"
      HostedZoneTags: 
        - 
          Key: "Service"
          Value: !Ref Service

Outputs:
  ZoneID:
    Value: !Ref HostedZone
    Description: Route53 hosted zone ID please add the name servers connected to this to your TLD
